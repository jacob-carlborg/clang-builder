name: CI

on:
  push:
    branches: '*'
    tags: v*
  pull_request:
    branches:
      - master

env:
  MACOSX_DEPLOYMENT_TARGET: 10.9
  sdk_version: '0.0.1'

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.arch }}-${{ matrix.data.os.target }}${{ matrix.data.os.version }}
    runs-on: ${{ matrix.data.os.host }}
    defaults:
      run:
        shell: bash
    env:
      BUILDER_ARCH: ${{ matrix.arch }}
      BUILDER_CROSS_COMPILE: ${{ matrix.data.cross_compile }}
      BUILDER_EXTRA_CMAKE_FLAGS: ${{ matrix.data.extra_cmake_flags }}
      BUILDER_OS: ${{ matrix.data.os.target }}
      BUILDER_OS_VERSION: ${{ matrix.data.os.version }}
      BUILDER_CUSTOM_SYSROOT: ${{ matrix.data.install_sdk }}
      BUILDER_TARGET_TRIPLE: ${{ matrix.data.target_triple }}
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        # data:
        #   - os:
        #       target: macos
        #       host: macOS-latest
        #
        #   - os:
        #       target: windows
        #       host: windows-latest

        include:
          # - arch: arm64
          #   data:
          #     cross_compile: true
          #     target_triple: arm64-apple-macos
          #     os:
          #       target: macos
          #       host: macOS-latest
          #     extra_cmake_flags: >
          #       -DCMAKE_OSX_ARCHITECTURES=arm64
          #       -DLLVM_ENABLE_ZSTD=OFF

          - arch: x86_64
            data:
              cross_compile: true
              target_triple: x86_64-unknown-freebsd13.1
              install_sdk: true
              os:
                target: freebsd
                host: ubuntu-latest

    steps:
      - name: Install dependencies
        if: runner.os == 'macOS'
        run: brew install ninja

      - name: Install dependencies
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install -y ninja-build

      - name: Clone repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install SDK
        if: matrix.data.install_sdk
        run: |
          curl -L -o sdk.tar.xz --retry 3 'https://github.com/d-cross-compiler/sdk-extractor/releases/download/v${{ env.sdk_version }}/sdk-${{ env.sdk_version }}-${{ matrix.data.target_triple }}.tar.xz'
          tar xf sdk.tar.xz

      - uses: ./.github/workflows/support/shared
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # build_linux:
  #   name: ${{ matrix.arch }}-linux
  #   runs-on: ubuntu-latest
  #   container: alpine:latest
  #   env:
  #     BUILDER_ARCH: ${{ matrix.arch }}
  #     BUILDER_CROSS_COMPILE: ${{ matrix.data.cross_compile }}
  #     BUILDER_EXTRA_CMAKE_FLAGS: ${{ matrix.data.extra_cmake_flags }}
  #     BUILDER_OS: linux
  #     BUILDER_OS_VERSION: ${{ matrix.data.os.version }}
  #   strategy:
  #     matrix:
  #       arch: [x86_64]
  #
  #   steps:
  #     - name: Install dependencies
  #       run: apk add --no-cache bash curl git bzip2 xz g++ gcc cmake python3 ninja
  #
  #     - name: Clone repository
  #       uses: actions/checkout@v3
  #       with:
  #         persist-credentials: false
  #
  #     - uses: ./.github/workflows/support/shared
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
